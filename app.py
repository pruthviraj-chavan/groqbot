import os
from flask import Flask, request, Response
from twilio.twiml.voice_response import VoiceResponse, Gather
from groq import Groq

app = Flask(__name__)

# API credentials - Using environment variables for production security
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")

# Initialize Groq client with error handling
try:
    client = Groq(api_key=GROQ_API_KEY)
    print("‚úÖ Groq client initialized successfully")
except Exception as e:
    print(f"‚ùå Error initializing Groq client: {e}")
    client = None

# Conversation context storage
conversation_contexts = {}

def get_conversation_context(caller_id):
    """Get or create conversation context for a caller"""
    if caller_id not in conversation_contexts:
        conversation_contexts[caller_id] = [
            {
                "role": "system", 
                "content": "‡§Ü‡§™ ‡§è‡§ï ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡§ø‡§Ç‡§¶‡•Ä AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§§‡§É ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§≠‡•Ä ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ö‡§™‡§®‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§, ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§î‡§∞ ‡§Æ‡§¶‡§¶‡§ó‡§æ‡§∞ ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§´‡•ã‡§® ‡§ï‡•â‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è 30-40 ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§"
            }
        ]
    return conversation_contexts[caller_id]

def generate_response(prompt, caller_id):
    """Generate AI response using Groq API with enhanced error handling"""
    try:
        # Validate API key and client
        if not GROQ_API_KEY:
            print("ERROR: GROQ_API_KEY not found")
            return "‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
        
        if not client:
            print("ERROR: Groq client not initialized")
            return "‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
            
        # Validate input
        if not prompt or prompt.strip() == "":
            return "‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§"
            
        messages = get_conversation_context(caller_id)
        messages.append({"role": "user", "content": prompt})
        
        print(f"Sending to Groq: {prompt}")  # Debug log
        
        # Generate response using Groq
        completion = client.chat.completions.create(
            model="llama-3.3-70b-versatile",
            messages=messages,
            max_tokens=100,
            temperature=0.7,
            top_p=1,
            stream=False
        )
        
        response_text = completion.choices[0].message.content.strip()
        messages.append({"role": "assistant", "content": response_text})
        
        print(f"Groq response: {response_text}")  # Debug log
        return response_text
        
    except Exception as e:
        print(f"Error generating response: {e}")
        print(f"Error type: {type(e)}")
        return "‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•ã‡§ó‡•Ä ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"

@app.route("/voice", methods=['POST'])
def voice():
    """Handle incoming voice calls with comprehensive error handling"""
    try:
        response = VoiceResponse()
        caller_id = request.form.get('From', 'unknown')
        
        print(f"Incoming call from: {caller_id}")
        print(f"Request form data: {dict(request.form)}")  # Debug log
        
        # Welcome message
        response.say(
            "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§î‡§∞ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§", 
            voice="Polly.Aditi", 
            language="hi-IN"
        )
        
        # Gather user input
        gather = Gather(
            input="speech", 
            action="/process_voice", 
            method="POST", 
            language="hi-IN", 
            speech_timeout="auto",
            timeout=8,
            hints="‡§π‡§æ‡§Å,‡§®‡§π‡•Ä‡§Ç,‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶,‡§®‡§Æ‡§∏‡•ç‡§§‡•á,‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ,‡§∏‡§µ‡§æ‡§≤,‡§Æ‡§¶‡§¶"
        )
        
        gather.say(
            "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§Ø‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§", 
            voice="Polly.Aditi", 
            language="hi-IN"
        )
        response.append(gather)
        
        # Fallback if no input
        response.say(
            "‡§ï‡•ã‡§à ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡•Ä ‡§ó‡§à‡•§ ‡§ï‡•â‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!", 
            voice="Polly.Aditi", 
            language="hi-IN"
        )
        
        return Response(str(response), content_type='text/xml')
        
    except Exception as e:
        print(f"Error in voice route: {e}")
        response = VoiceResponse()
        response.say(
            "‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§", 
            voice="Polly.Aditi", 
            language="hi-IN"
        )
        return Response(str(response), content_type='text/xml')

@app.route("/process_voice", methods=['POST'])
def process_voice():
    """Process user speech and generate AI response with error handling"""
    try:
        response = VoiceResponse()
        caller_id = request.form.get('From', 'unknown')
        
        # Get speech input from Twilio
        speech_text = request.form.get("SpeechResult", "")
        confidence = request.form.get("Confidence", "0")
        
        print(f"User said: '{speech_text}' (Confidence: {confidence})")
        print(f"Process voice form data: {dict(request.form)}")  # Debug log
        
        # Handle empty or unclear speech
        if not speech_text or speech_text.lower().strip() in ['', 'um', 'uh', 'hmm']:
            response.say(
                "‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡§æ‡§´‡§º ‡§∏‡•Å‡§®‡§æ‡§à ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§", 
                voice="Polly.Aditi", 
                language="hi-IN"
            )
            
            # Give another chance to speak
            gather = Gather(
                input="speech", 
                action="/process_voice", 
                method="POST", 
                language="hi-IN", 
                speech_timeout="auto",
                timeout=8,
                hints="‡§π‡§æ‡§Å,‡§®‡§π‡•Ä‡§Ç,‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶,‡§®‡§Æ‡§∏‡•ç‡§§‡•á,‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ,‡§∏‡§µ‡§æ‡§≤,‡§Æ‡§¶‡§¶"
            )
            gather.say("‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡•ã‡§≤‡•á‡§Ç‡•§", voice="Polly.Aditi", language="hi-IN")
            response.append(gather)
            
            # Final fallback
            response.say(
                "‡§ï‡•â‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§ ‡§®‡§Æ‡§∏‡•ç‡§§‡•á!", 
                voice="Polly.Aditi", 
                language="hi-IN"
            )
            return Response(str(response), content_type='text/xml')
        
        # Check for goodbye/end call phrases
        end_phrases = ['‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ', '‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶', '‡§¨‡§æ‡§Ø', 'bye', 'goodbye', '‡§ñ‡§§‡•ç‡§Æ', '‡§∏‡§Æ‡§æ‡§™‡•ç‡§§', '‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã', '‡§∞‡•Å‡§ï‡•ã']
        if any(phrase in speech_text.lower() for phrase in end_phrases):
            response.say(
                "‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡§æ ‡§¶‡§ø‡§® ‡§∂‡•Å‡§≠ ‡§π‡•ã‡•§", 
                voice="Polly.Aditi", 
                language="hi-IN"
            )
            response.hangup()
            return Response(str(response), content_type='text/xml')
        
        # Generate AI response using Groq
        ai_response = generate_response(speech_text, caller_id)
        print(f"AI response: {ai_response}")
        
        # Speak the AI response
        response.say(ai_response, voice="Polly.Aditi", language="hi-IN")
        
        # Continue conversation
        gather = Gather(
            input="speech", 
            action="/process_voice", 
            method="POST", 
            language="hi-IN", 
            speech_timeout="auto",
            timeout=8,
            hints="‡§π‡§æ‡§Å,‡§®‡§π‡•Ä‡§Ç,‡§î‡§∞,‡§Ö‡§ß‡§ø‡§ï,‡§∏‡§Æ‡§ù‡§æ‡§ì,‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶,‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ"
        )
        
        gather.say(
            "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡§æ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à?", 
            voice="Polly.Aditi", 
            language="hi-IN"
        )
        response.append(gather)
        
        # End call gracefully if no more input
        response.say(
            "‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§ ‡§®‡§Æ‡§∏‡•ç‡§§‡•á!", 
            voice="Polly.Aditi", 
            language="hi-IN"
        )
        
        return Response(str(response), content_type='text/xml')
        
    except Exception as e:
        print(f"Error in process_voice route: {e}")
        response = VoiceResponse()
        response.say(
            "‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§", 
            voice="Polly.Aditi", 
            language="hi-IN"
        )
        response.hangup()
        return Response(str(response), content_type='text/xml')

@app.route("/", methods=['GET'])
def home():
    return """
    <h1>ü§ñ Indian Voice Bot is Running!</h1>
    <p><strong>Status:</strong> Active and ready for calls</p>
    <p><strong>Groq API:</strong> Connected</p>
    <p><strong>Twilio:</strong> Configured</p>
    <p><strong>Language:</strong> Hindi (Primary), English (Secondary)</p>
    <p><strong>Webhook URL:</strong> /voice</p>
    <p><strong>Test Endpoint:</strong> <a href="/test">/test</a></p>
    <p><strong>Debug Endpoint:</strong> <a href="/debug">/debug</a></p>
    """

@app.route("/test", methods=['GET'])
def test():
    """Test endpoint to verify Groq API connection"""
    try:
        if not client:
            return "<h2>‚ùå Groq API Test Failed</h2><p><strong>Error:</strong> Groq client not initialized</p>"
        
        test_response = generate_response("‡§®‡§Æ‡§∏‡•ç‡§§‡•á, ‡§Ü‡§™ ‡§ï‡•à‡§∏‡•á ‡§π‡•à‡§Ç?", "test_user")
        return f"<h2>‚úÖ Groq API Test Successful!</h2><p><strong>Response:</strong> {test_response}</p>"
    except Exception as e:
        return f"<h2>‚ùå Groq API Test Failed</h2><p><strong>Error:</strong> {str(e)}</p>"

@app.route("/debug", methods=['GET'])
def debug():
    """Debug endpoint to check environment variables and system status"""
    return f"""
    <h2>üîß System Debug Information</h2>
    <h3>Environment Variables:</h3>
    <p><strong>GROQ_API_KEY:</strong> {'‚úÖ Set' if GROQ_API_KEY else '‚ùå Missing'}</p>
    <p><strong>TWILIO_ACCOUNT_SID:</strong> {'‚úÖ Set' if TWILIO_ACCOUNT_SID else '‚ùå Missing'}</p>
    <p><strong>TWILIO_AUTH_TOKEN:</strong> {'‚úÖ Set' if TWILIO_AUTH_TOKEN else '‚ùå Missing'}</p>
    
    <h3>System Status:</h3>
    <p><strong>Groq Client:</strong> {'‚úÖ Initialized' if client else '‚ùå Failed'}</p>
    <p><strong>Active Conversations:</strong> {len(conversation_contexts)}</p>
    <p><strong>Flask Debug:</strong> {app.debug}</p>
    
    <h3>Webhook URLs:</h3>
    <p><strong>Voice:</strong> https://[your-app-url]/voice</p>
    <p><strong>Process:</strong> https://[your-app-url]/process_voice</p>
    """

@app.route("/health", methods=['GET'])
def health():
    """Health check endpoint for monitoring"""
    try:
        status = {
            "status": "healthy" if client else "unhealthy",
            "groq_client": "connected" if client else "disconnected",
            "active_conversations": len(conversation_contexts)
        }
        return status
    except Exception as e:
        return {"status": "error", "error": str(e)}, 500

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    debug_mode = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'
    
    print("üöÄ Starting Indian Voice Bot...")
    print(f"‚úÖ Groq API Key: {'Loaded' if GROQ_API_KEY else 'Missing'}")
    print(f"‚úÖ Twilio Account SID: {'Loaded' if TWILIO_ACCOUNT_SID else 'Missing'}")
    print(f"‚úÖ Twilio Auth Token: {'Loaded' if TWILIO_AUTH_TOKEN else 'Missing'}")
    print(f"üåê Server starting on port {port}")
    print(f"üîß Debug mode: {debug_mode}")
    
    app.run(debug=debug_mode, host='0.0.0.0', port=port)
